/*
 * @Author       : jiapeng.Zheng
 * @Date         : 2020-04-28 16:32:43
 * @LastEditors  : jiapeng.Zheng
 * @LastEditTime : 2020-04-28 17:40:39
 * @Description  :
 */
import assert from 'assert';
import FormatUtil from '@/utils/format';
import { UNIT_FREQ, UNIT_TIME, UNIT_TIME_S, DATA_TYPE_UNIT_CONFIG } from '@/config/unitConfig';
describe('src/config/unitConfig', () => {
  it('TEST UNIT_FREQ, UNIT_TIME, UNIT_TIME_S', () => {
    assert(UNIT_FREQ === 'frequency');
    assert(UNIT_TIME === 'Time');
    assert(UNIT_TIME_S === 's');
    assert(DATA_TYPE_UNIT_CONFIG.length === 13);
  });
  it('TEST DATA_TYPE_UNIT_CONFIG has `null` unit', () => {
    const unit = FormatUtil.getCascaderObj(['-'], DATA_TYPE_UNIT_CONFIG);
    assert(unit.length === 1);
    assert(unit[0].value === '-');
    assert(unit[0].label === '');
  });
  it('TEST DATA_TYPE_UNIT_CONFIG has `Time` unit', () => {
    let unit = FormatUtil.getCascaderObj(['Time'], DATA_TYPE_UNIT_CONFIG);
    assert(unit.length === 1);
    assert(unit[0].value === 'Time');
    assert(unit[0].label === '时间');
    assert(unit[0].children.length === 6);
    unit = FormatUtil.getCascaderObj(['Time', 's'], DATA_TYPE_UNIT_CONFIG);
    assert(unit.length === 2);
    assert(unit[1].value === 's');
    assert(unit[1].label === '秒');
    assert(unit[1].isBase === true);
    assert(unit[1].format.step === 1);
    unit = FormatUtil.getCascaderObj(['Time', 'm'], DATA_TYPE_UNIT_CONFIG);
    assert(unit.length === 2);
    assert(unit[1].value === 'm');
    assert(unit[1].label === '分');
    assert(unit[1].isBase === undefined);
    assert(unit[1].format.step === 60);
    unit = FormatUtil.getCascaderObj(['Time', 'h'], DATA_TYPE_UNIT_CONFIG);
    assert(unit.length === 2);
    assert(unit[1].value === 'h');
    assert(unit[1].label === '时');
    assert(unit[1].isBase === undefined);
    assert(unit[1].format.step === 60 * 60);
    unit = FormatUtil.getCascaderObj(['Time', 'd'], DATA_TYPE_UNIT_CONFIG);
    assert(unit.length === 2);
    assert(unit[1].value === 'd');
    assert(unit[1].label === '日');
    assert(unit[1].isBase === undefined);
    assert(unit[1].format.step === 60 * 60 * 24);
    unit = FormatUtil.getCascaderObj(['Time', 'M'], DATA_TYPE_UNIT_CONFIG);
    assert(unit.length === 2);
    assert(unit[1].value === 'M');
    assert(unit[1].label === '月');
    assert(unit[1].isBase === undefined);
    assert(unit[1].format.step === 60 * 60 * 24 * 30);
    unit = FormatUtil.getCascaderObj(['Time', 'y'], DATA_TYPE_UNIT_CONFIG);
    assert(unit.length === 2);
    assert(unit[1].value === 'y');
    assert(unit[1].label === '年');
    assert(unit[1].isBase === undefined);
    assert(unit[1].format.step === 60 * 60 * 24 * 365);
  });
  it('TEST DATA_TYPE_UNIT_CONFIG has `Energy` unit', () => {
    let unit = FormatUtil.getCascaderObj(['Energy'], DATA_TYPE_UNIT_CONFIG);
    assert(unit.length === 1);
    assert(unit[0].value === 'Energy');
    assert(unit[0].label === '电量');
    assert(unit[0].children.length === 1);
    unit = FormatUtil.getCascaderObj(['Energy', 'kW·h'], DATA_TYPE_UNIT_CONFIG);
    assert(unit.length === 2);
    assert(unit[1].value === 'kW·h');
    assert(unit[1].label === 'kW·h');
    assert(unit[1].isBase === true);
    assert(unit[1].format.step === 1);
  });
  it('TEST DATA_TYPE_UNIT_CONFIG has `Flow` unit', () => {
    let unit = FormatUtil.getCascaderObj(['Flow'], DATA_TYPE_UNIT_CONFIG);
    assert(unit.length === 1);
    assert(unit[0].value === 'Flow');
    assert(unit[0].label === '流量');
    assert(unit[0].children.length === 3);
    unit = FormatUtil.getCascaderObj(['Flow', 'm3'], DATA_TYPE_UNIT_CONFIG);
    assert(unit.length === 2);
    assert(unit[1].value === 'm3');
    assert(unit[1].label === 'm³');
    assert(unit[1].isBase === true);
    assert(unit[1].format.step === 1);
    unit = FormatUtil.getCascaderObj(['Flow', 'm3/d'], DATA_TYPE_UNIT_CONFIG);
    assert(unit.length === 2);
    assert(unit[1].value === 'm3/d');
    assert(unit[1].label === 'm³/d');
    assert(unit[1].isBase === undefined);
    assert(unit[1].format.step === 1);
    unit = FormatUtil.getCascaderObj(['Flow', 'm3/H'], DATA_TYPE_UNIT_CONFIG);
    assert(unit.length === 2);
    assert(unit[1].value === 'm3/H');
    assert(unit[1].label === 'm³/H');
    assert(unit[1].isBase === undefined);
    assert(unit[1].format.step === 24);
  });
  it('TEST DATA_TYPE_UNIT_CONFIG has `concentration` unit', () => {
    let unit = FormatUtil.getCascaderObj(['concentration'], DATA_TYPE_UNIT_CONFIG);
    assert(unit.length === 1);
    assert(unit[0].value === 'concentration');
    assert(unit[0].label === '浓度');
    assert(unit[0].children.length === 2);
    unit = FormatUtil.getCascaderObj(['concentration', 'mg/L'], DATA_TYPE_UNIT_CONFIG);
    assert(unit.length === 2);
    assert(unit[1].value === 'mg/L');
    assert(unit[1].label === 'mg/L');
    assert(unit[1].isBase === true);
    assert(unit[1].format.step === 1);
    unit = FormatUtil.getCascaderObj(['concentration', 'g/L'], DATA_TYPE_UNIT_CONFIG);
    assert(unit.length === 2);
    assert(unit[1].value === 'g/L');
    assert(unit[1].label === 'g/L');
    assert(unit[1].isBase === undefined);
    assert(unit[1].format.step === 1000);
  });
  it('TEST DATA_TYPE_UNIT_CONFIG has `ppm` unit', () => {
    let unit = FormatUtil.getCascaderObj(['ppm'], DATA_TYPE_UNIT_CONFIG);
    assert(unit.length === 1);
    assert(unit[0].value === 'ppm');
    assert(unit[0].label === 'ppm浓度');
    assert(unit[0].children.length === 1);
    unit = FormatUtil.getCascaderObj(['ppm', 'ppm'], DATA_TYPE_UNIT_CONFIG);
    assert(unit.length === 2);
    assert(unit[1].value === 'ppm');
    assert(unit[1].label === 'ppm');
    assert(unit[1].isBase === true);
    assert(unit[1].format.step === 1);
  });
  it('TEST DATA_TYPE_UNIT_CONFIG has `airPressure` unit', () => {
    let unit = FormatUtil.getCascaderObj(['airPressure'], DATA_TYPE_UNIT_CONFIG);
    assert(unit.length === 1);
    assert(unit[0].value === 'airPressure');
    assert(unit[0].label === '气压');
    assert(unit[0].children.length === 3);
    unit = FormatUtil.getCascaderObj(['airPressure', 'KPa'], DATA_TYPE_UNIT_CONFIG);
    assert(unit.length === 2);
    assert(unit[1].value === 'KPa');
    assert(unit[1].label === 'KPa');
    assert(unit[1].isBase === true);
    assert(unit[1].format.step === 1);
    unit = FormatUtil.getCascaderObj(['airPressure', 'Pa'], DATA_TYPE_UNIT_CONFIG);
    assert(unit.length === 2);
    assert(unit[1].value === 'Pa');
    assert(unit[1].label === 'Pa');
    assert(unit[1].isBase === undefined);
    assert(unit[1].format.step === 1 / 1000);
    unit = FormatUtil.getCascaderObj(['airPressure', 'MPa'], DATA_TYPE_UNIT_CONFIG);
    assert(unit.length === 2);
    assert(unit[1].value === 'MPa');
    assert(unit[1].label === 'MPa');
    assert(unit[1].isBase === undefined);
    assert(unit[1].format.step === 1000);
  });
  it('TEST DATA_TYPE_UNIT_CONFIG has `Voltage` unit', () => {
    let unit = FormatUtil.getCascaderObj(['Voltage'], DATA_TYPE_UNIT_CONFIG);
    assert(unit.length === 1);
    assert(unit[0].value === 'Voltage');
    assert(unit[0].label === '电压');
    assert(unit[0].children.length === 2);
    unit = FormatUtil.getCascaderObj(['Voltage', 'mV'], DATA_TYPE_UNIT_CONFIG);
    assert(unit.length === 2);
    assert(unit[1].value === 'mV');
    assert(unit[1].label === 'mV');
    assert(unit[1].isBase === true);
    assert(unit[1].format.step === 1);
    unit = FormatUtil.getCascaderObj(['Voltage', 'V'], DATA_TYPE_UNIT_CONFIG);
    assert(unit.length === 2);
    assert(unit[1].value === 'V');
    assert(unit[1].label === 'V');
    assert(unit[1].isBase === undefined);
    assert(unit[1].format.step === 1000);
  });
  it('TEST DATA_TYPE_UNIT_CONFIG has `Current` unit', () => {
    let unit = FormatUtil.getCascaderObj(['Current'], DATA_TYPE_UNIT_CONFIG);
    assert(unit.length === 1);
    assert(unit[0].value === 'Current');
    assert(unit[0].label === '电流');
    assert(unit[0].children.length === 2);
    unit = FormatUtil.getCascaderObj(['Current', 'mA'], DATA_TYPE_UNIT_CONFIG);
    assert(unit.length === 2);
    assert(unit[1].value === 'mA');
    assert(unit[1].label === 'mA');
    assert(unit[1].isBase === true);
    assert(unit[1].format.step === 1);
    unit = FormatUtil.getCascaderObj(['Current', 'A'], DATA_TYPE_UNIT_CONFIG);
    assert(unit.length === 2);
    assert(unit[1].value === 'A');
    assert(unit[1].label === 'A');
    assert(unit[1].isBase === undefined);
    assert(unit[1].format.step === 1000);
  });
  it('TEST DATA_TYPE_UNIT_CONFIG has `frequency` unit', () => {
    let unit = FormatUtil.getCascaderObj(['frequency'], DATA_TYPE_UNIT_CONFIG);
    assert(unit.length === 1);
    assert(unit[0].value === 'frequency');
    assert(unit[0].label === '频率');
    assert(unit[0].children.length === 3);
    unit = FormatUtil.getCascaderObj(['frequency', 'HZ'], DATA_TYPE_UNIT_CONFIG);
    assert(unit.length === 2);
    assert(unit[1].value === 'HZ');
    assert(unit[1].label === 'HZ');
    assert(unit[1].max === 50);
    assert(unit[1].isBase === true);
    assert(unit[1].format.step === 1);
    unit = FormatUtil.getCascaderObj(['frequency', 'KHZ'], DATA_TYPE_UNIT_CONFIG);
    assert(unit.length === 2);
    assert(unit[1].value === 'KHZ');
    assert(unit[1].label === 'KHZ');
    assert(unit[1].isBase === undefined);
    assert(unit[1].format.step === 1000);
    unit = FormatUtil.getCascaderObj(['frequency', 'MHZ'], DATA_TYPE_UNIT_CONFIG);
    assert(unit.length === 2);
    assert(unit[1].value === 'MHZ');
    assert(unit[1].label === 'MHZ');
    assert(unit[1].isBase === undefined);
    assert(unit[1].format.step === 1000 * 1000);
  });
  it('TEST DATA_TYPE_UNIT_CONFIG has `power` unit', () => {
    let unit = FormatUtil.getCascaderObj(['power'], DATA_TYPE_UNIT_CONFIG);
    assert(unit.length === 1);
    assert(unit[0].value === 'power');
    assert(unit[0].label === '功率');
    assert(unit[0].children.length === 3);
    unit = FormatUtil.getCascaderObj(['power', 'W'], DATA_TYPE_UNIT_CONFIG);
    assert(unit.length === 2);
    assert(unit[1].value === 'W');
    assert(unit[1].label === 'W');
    assert(unit[1].isBase === true);
    assert(unit[1].format.step === 1);
    unit = FormatUtil.getCascaderObj(['power', 'KW'], DATA_TYPE_UNIT_CONFIG);
    assert(unit.length === 2);
    assert(unit[1].value === 'KW');
    assert(unit[1].label === 'KW');
    assert(unit[1].isBase === undefined);
    assert(unit[1].format.step === 1000);
    unit = FormatUtil.getCascaderObj(['power', 'MW'], DATA_TYPE_UNIT_CONFIG);
    assert(unit.length === 2);
    assert(unit[1].value === 'MW');
    assert(unit[1].label === 'MW');
    assert(unit[1].isBase === undefined);
    assert(unit[1].format.step === 1000 * 1000);
  });
  it('TEST DATA_TYPE_UNIT_CONFIG has `temperature` unit', () => {
    let unit = FormatUtil.getCascaderObj(['temperature'], DATA_TYPE_UNIT_CONFIG);
    assert(unit.length === 1);
    assert(unit[0].value === 'temperature');
    assert(unit[0].label === '温度');
    assert(unit[0].children.length === 1);
    unit = FormatUtil.getCascaderObj(['temperature', '℃'], DATA_TYPE_UNIT_CONFIG);
    assert(unit.length === 2);
    assert(unit[1].value === '℃');
    assert(unit[1].label === '℃');
    assert(unit[1].isBase === true);
    assert(unit[1].format.step === 1);
  });
  it('TEST DATA_TYPE_UNIT_CONFIG has `humidity` unit', () => {
    let unit = FormatUtil.getCascaderObj(['humidity'], DATA_TYPE_UNIT_CONFIG);
    assert(unit.length === 1);
    assert(unit[0].value === 'humidity');
    assert(unit[0].label === '湿度');
    assert(unit[0].children.length === 1);
    unit = FormatUtil.getCascaderObj(['humidity', '%'], DATA_TYPE_UNIT_CONFIG);
    assert(unit.length === 2);
    assert(unit[1].value === '%');
    assert(unit[1].label === '%');
    assert(unit[1].isBase === true);
    assert(unit[1].format.step === 1);
  });
});
