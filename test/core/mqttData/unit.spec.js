/*
 * @Author       : jiapeng.Zheng
 * @Date         : 2020-04-30 17:39:58
 * @LastEditors  : jiapeng.Zheng
 * @LastEditTime : 2020-05-07 17:24:32
 * @Description  :
 */
import assert from 'assert';
import MqttData from '@/core/mqttData/index';
describe('src/core/mqttData/index Unit', () => {
  it('TEST getBaseUnit', () => {
    // 时间单位
    let unit = '["Time"]';
    assert(MqttData.getBaseUnit(unit) === 's');
    assert(MqttData.getBaseUnit(unit, 'label') === '秒');
    assert(MqttData.getBaseUnit(unit, 'isBase') === true);
    assert(MqttData.getBaseUnit(unit, 'format') !== undefined);
    assert(MqttData.getBaseUnit(unit, 'format').step === 1);
    assert(MqttData.getBaseUnit(unit, 'children') === undefined);
    assert(MqttData.getBaseUnit(unit, 'max') === undefined);
    unit = 'Time';
    assert(MqttData.getBaseUnit(unit) === 's');
    assert(MqttData.getBaseUnit(unit, 'label') === '秒');
    assert(MqttData.getBaseUnit(unit, 'isBase') === true);
    assert(MqttData.getBaseUnit(unit, 'format') !== undefined);
    assert(MqttData.getBaseUnit(unit, 'format').step === 1);
    assert(MqttData.getBaseUnit(unit, 'children') === undefined);
    assert(MqttData.getBaseUnit(unit, 'max') === undefined);
    unit = '["Time","s"]';
    assert(MqttData.getBaseUnit(unit) === 's');
    assert(MqttData.getBaseUnit(unit, 'label') === '秒');
    assert(MqttData.getBaseUnit(unit, 'isBase') === true);
    assert(MqttData.getBaseUnit(unit, 'format') !== undefined);
    assert(MqttData.getBaseUnit(unit, 'format').step === 1);
    assert(MqttData.getBaseUnit(unit, 'children') === undefined);
    assert(MqttData.getBaseUnit(unit, 'max') === undefined);
    unit = '["Time","m"]';
    assert(MqttData.getBaseUnit(unit) === 's');
    assert(MqttData.getBaseUnit(unit, 'label') === '秒');
    assert(MqttData.getBaseUnit(unit, 'isBase') === true);
    assert(MqttData.getBaseUnit(unit, 'format') !== undefined);
    assert(MqttData.getBaseUnit(unit, 'format').step === 1);
    assert(MqttData.getBaseUnit(unit, 'children') === undefined);
    assert(MqttData.getBaseUnit(unit, 'max') === undefined);
    unit = '["Time","h"]';
    assert(MqttData.getBaseUnit(unit) === 's');
    assert(MqttData.getBaseUnit(unit, 'label') === '秒');
    assert(MqttData.getBaseUnit(unit, 'isBase') === true);
    assert(MqttData.getBaseUnit(unit, 'format') !== undefined);
    assert(MqttData.getBaseUnit(unit, 'format').step === 1);
    assert(MqttData.getBaseUnit(unit, 'children') === undefined);
    assert(MqttData.getBaseUnit(unit, 'max') === undefined);
    unit = '["Time","d"]';
    assert(MqttData.getBaseUnit(unit) === 's');
    assert(MqttData.getBaseUnit(unit, 'label') === '秒');
    assert(MqttData.getBaseUnit(unit, 'isBase') === true);
    assert(MqttData.getBaseUnit(unit, 'format') !== undefined);
    assert(MqttData.getBaseUnit(unit, 'format').step === 1);
    assert(MqttData.getBaseUnit(unit, 'children') === undefined);
    assert(MqttData.getBaseUnit(unit, 'max') === undefined);
    unit = '["Time","M"]';
    assert(MqttData.getBaseUnit(unit) === 's');
    assert(MqttData.getBaseUnit(unit, 'label') === '秒');
    assert(MqttData.getBaseUnit(unit, 'isBase') === true);
    assert(MqttData.getBaseUnit(unit, 'format') !== undefined);
    assert(MqttData.getBaseUnit(unit, 'format').step === 1);
    assert(MqttData.getBaseUnit(unit, 'children') === undefined);
    assert(MqttData.getBaseUnit(unit, 'max') === undefined);
    unit = '["Time","y"]';
    assert(MqttData.getBaseUnit(unit) === 's');
    assert(MqttData.getBaseUnit(unit, 'label') === '秒');
    assert(MqttData.getBaseUnit(unit, 'isBase') === true);
    assert(MqttData.getBaseUnit(unit, 'format') !== undefined);
    assert(MqttData.getBaseUnit(unit, 'format').step === 1);
    assert(MqttData.getBaseUnit(unit, 'children') === undefined);
    assert(MqttData.getBaseUnit(unit, 'max') === undefined);
    // 电量单位
    unit = 'Energy';
    assert(MqttData.getBaseUnit(unit) === 'kW·h');
    assert(MqttData.getBaseUnit(unit, 'label') === 'kW·h');
    assert(MqttData.getBaseUnit(unit, 'isBase') === true);
    assert(MqttData.getBaseUnit(unit, 'format') !== undefined);
    assert(MqttData.getBaseUnit(unit, 'format').step === 1);
    assert(MqttData.getBaseUnit(unit, 'children') === undefined);
    assert(MqttData.getBaseUnit(unit, 'max') === undefined);
    unit = '["Energy"]';
    assert(MqttData.getBaseUnit(unit) === 'kW·h');
    assert(MqttData.getBaseUnit(unit, 'label') === 'kW·h');
    assert(MqttData.getBaseUnit(unit, 'isBase') === true);
    assert(MqttData.getBaseUnit(unit, 'format') !== undefined);
    assert(MqttData.getBaseUnit(unit, 'format').step === 1);
    assert(MqttData.getBaseUnit(unit, 'children') === undefined);
    assert(MqttData.getBaseUnit(unit, 'max') === undefined);
    unit = '["Energy","kW·h"]';
    assert(MqttData.getBaseUnit(unit) === 'kW·h');
    assert(MqttData.getBaseUnit(unit, 'label') === 'kW·h');
    assert(MqttData.getBaseUnit(unit, 'isBase') === true);
    assert(MqttData.getBaseUnit(unit, 'format') !== undefined);
    assert(MqttData.getBaseUnit(unit, 'format').step === 1);
    assert(MqttData.getBaseUnit(unit, 'children') === undefined);
    assert(MqttData.getBaseUnit(unit, 'max') === undefined);
    // 流量单位
    unit = 'Flow';
    assert(MqttData.getBaseUnit(unit) === 'm3');
    assert(MqttData.getBaseUnit(unit, 'label') === 'm³');
    assert(MqttData.getBaseUnit(unit, 'isBase') === true);
    assert(MqttData.getBaseUnit(unit, 'format') !== undefined);
    assert(MqttData.getBaseUnit(unit, 'format').step === 1);
    assert(MqttData.getBaseUnit(unit, 'children') === undefined);
    assert(MqttData.getBaseUnit(unit, 'max') === undefined);
    unit = '["Flow"]';
    assert(MqttData.getBaseUnit(unit) === 'm3');
    assert(MqttData.getBaseUnit(unit, 'label') === 'm³');
    assert(MqttData.getBaseUnit(unit, 'isBase') === true);
    assert(MqttData.getBaseUnit(unit, 'format') !== undefined);
    assert(MqttData.getBaseUnit(unit, 'format').step === 1);
    assert(MqttData.getBaseUnit(unit, 'children') === undefined);
    assert(MqttData.getBaseUnit(unit, 'max') === undefined);
    unit = '["Flow","m3"]';
    assert(MqttData.getBaseUnit(unit) === 'm3');
    assert(MqttData.getBaseUnit(unit, 'label') === 'm³');
    assert(MqttData.getBaseUnit(unit, 'isBase') === true);
    assert(MqttData.getBaseUnit(unit, 'format') !== undefined);
    assert(MqttData.getBaseUnit(unit, 'format').step === 1);
    assert(MqttData.getBaseUnit(unit, 'children') === undefined);
    assert(MqttData.getBaseUnit(unit, 'max') === undefined);
    unit = '["Flow","m3/d"]';
    assert(MqttData.getBaseUnit(unit) === 'm3');
    assert(MqttData.getBaseUnit(unit, 'label') === 'm³');
    assert(MqttData.getBaseUnit(unit, 'isBase') === true);
    assert(MqttData.getBaseUnit(unit, 'format') !== undefined);
    assert(MqttData.getBaseUnit(unit, 'format').step === 1);
    assert(MqttData.getBaseUnit(unit, 'children') === undefined);
    assert(MqttData.getBaseUnit(unit, 'max') === undefined);
    unit = '["Flow","m3/H"]';
    assert(MqttData.getBaseUnit(unit) === 'm3');
    assert(MqttData.getBaseUnit(unit, 'label') === 'm³');
    assert(MqttData.getBaseUnit(unit, 'isBase') === true);
    assert(MqttData.getBaseUnit(unit, 'format') !== undefined);
    assert(MqttData.getBaseUnit(unit, 'format').step === 1);
    assert(MqttData.getBaseUnit(unit, 'children') === undefined);
    assert(MqttData.getBaseUnit(unit, 'max') === undefined);
    // 浓度单位
    unit = 'concentration';
    assert(MqttData.getBaseUnit(unit) === 'mg/L');
    assert(MqttData.getBaseUnit(unit, 'label') === 'mg/L');
    assert(MqttData.getBaseUnit(unit, 'isBase') === true);
    assert(MqttData.getBaseUnit(unit, 'format') !== undefined);
    assert(MqttData.getBaseUnit(unit, 'format').step === 1);
    assert(MqttData.getBaseUnit(unit, 'children') === undefined);
    assert(MqttData.getBaseUnit(unit, 'max') === undefined);
    unit = '["concentration"]';
    assert(MqttData.getBaseUnit(unit) === 'mg/L');
    assert(MqttData.getBaseUnit(unit, 'label') === 'mg/L');
    assert(MqttData.getBaseUnit(unit, 'isBase') === true);
    assert(MqttData.getBaseUnit(unit, 'format') !== undefined);
    assert(MqttData.getBaseUnit(unit, 'format').step === 1);
    assert(MqttData.getBaseUnit(unit, 'children') === undefined);
    assert(MqttData.getBaseUnit(unit, 'max') === undefined);
    unit = '["concentration","mg/L"]';
    assert(MqttData.getBaseUnit(unit) === 'mg/L');
    assert(MqttData.getBaseUnit(unit, 'label') === 'mg/L');
    assert(MqttData.getBaseUnit(unit, 'isBase') === true);
    assert(MqttData.getBaseUnit(unit, 'format') !== undefined);
    assert(MqttData.getBaseUnit(unit, 'format').step === 1);
    assert(MqttData.getBaseUnit(unit, 'children') === undefined);
    assert(MqttData.getBaseUnit(unit, 'max') === undefined);
    unit = '["concentration","g/L"]';
    assert(MqttData.getBaseUnit(unit) === 'mg/L');
    assert(MqttData.getBaseUnit(unit, 'label') === 'mg/L');
    assert(MqttData.getBaseUnit(unit, 'isBase') === true);
    assert(MqttData.getBaseUnit(unit, 'format') !== undefined);
    assert(MqttData.getBaseUnit(unit, 'format').step === 1);
    assert(MqttData.getBaseUnit(unit, 'children') === undefined);
    assert(MqttData.getBaseUnit(unit, 'max') === undefined);
    // ppm浓度单位
    unit = 'ppm';
    assert(MqttData.getBaseUnit(unit) === 'ppm');
    assert(MqttData.getBaseUnit(unit, 'label') === 'ppm');
    assert(MqttData.getBaseUnit(unit, 'isBase') === true);
    assert(MqttData.getBaseUnit(unit, 'format') !== undefined);
    assert(MqttData.getBaseUnit(unit, 'format').step === 1);
    assert(MqttData.getBaseUnit(unit, 'children') === undefined);
    assert(MqttData.getBaseUnit(unit, 'max') === undefined);
    unit = '["ppm"]';
    assert(MqttData.getBaseUnit(unit) === 'ppm');
    assert(MqttData.getBaseUnit(unit, 'label') === 'ppm');
    assert(MqttData.getBaseUnit(unit, 'isBase') === true);
    assert(MqttData.getBaseUnit(unit, 'format') !== undefined);
    assert(MqttData.getBaseUnit(unit, 'format').step === 1);
    assert(MqttData.getBaseUnit(unit, 'children') === undefined);
    assert(MqttData.getBaseUnit(unit, 'max') === undefined);
    unit = '["ppm","ppm"]';
    assert(MqttData.getBaseUnit(unit) === 'ppm');
    assert(MqttData.getBaseUnit(unit, 'label') === 'ppm');
    assert(MqttData.getBaseUnit(unit, 'isBase') === true);
    assert(MqttData.getBaseUnit(unit, 'format') !== undefined);
    assert(MqttData.getBaseUnit(unit, 'format').step === 1);
    assert(MqttData.getBaseUnit(unit, 'children') === undefined);
    assert(MqttData.getBaseUnit(unit, 'max') === undefined);
    // 气压
    unit = 'airPressure';
    assert(MqttData.getBaseUnit(unit) === 'KPa');
    assert(MqttData.getBaseUnit(unit, 'label') === 'KPa');
    assert(MqttData.getBaseUnit(unit, 'isBase') === true);
    assert(MqttData.getBaseUnit(unit, 'format') !== undefined);
    assert(MqttData.getBaseUnit(unit, 'format').step === 1);
    assert(MqttData.getBaseUnit(unit, 'children') === undefined);
    assert(MqttData.getBaseUnit(unit, 'max') === undefined);
    unit = '["airPressure"]';
    assert(MqttData.getBaseUnit(unit) === 'KPa');
    assert(MqttData.getBaseUnit(unit, 'label') === 'KPa');
    assert(MqttData.getBaseUnit(unit, 'isBase') === true);
    assert(MqttData.getBaseUnit(unit, 'format') !== undefined);
    assert(MqttData.getBaseUnit(unit, 'format').step === 1);
    assert(MqttData.getBaseUnit(unit, 'children') === undefined);
    assert(MqttData.getBaseUnit(unit, 'max') === undefined);
    unit = '["airPressure","KPa"]';
    assert(MqttData.getBaseUnit(unit) === 'KPa');
    assert(MqttData.getBaseUnit(unit, 'label') === 'KPa');
    assert(MqttData.getBaseUnit(unit, 'isBase') === true);
    assert(MqttData.getBaseUnit(unit, 'format') !== undefined);
    assert(MqttData.getBaseUnit(unit, 'format').step === 1);
    assert(MqttData.getBaseUnit(unit, 'children') === undefined);
    assert(MqttData.getBaseUnit(unit, 'max') === undefined);
    unit = '["airPressure","Pa"]';
    assert(MqttData.getBaseUnit(unit) === 'KPa');
    assert(MqttData.getBaseUnit(unit, 'label') === 'KPa');
    assert(MqttData.getBaseUnit(unit, 'isBase') === true);
    assert(MqttData.getBaseUnit(unit, 'format') !== undefined);
    assert(MqttData.getBaseUnit(unit, 'format').step === 1);
    assert(MqttData.getBaseUnit(unit, 'children') === undefined);
    assert(MqttData.getBaseUnit(unit, 'max') === undefined);
    unit = '["airPressure","MPa"]';
    assert(MqttData.getBaseUnit(unit) === 'KPa');
    assert(MqttData.getBaseUnit(unit, 'label') === 'KPa');
    assert(MqttData.getBaseUnit(unit, 'isBase') === true);
    assert(MqttData.getBaseUnit(unit, 'format') !== undefined);
    assert(MqttData.getBaseUnit(unit, 'format').step === 1);
    assert(MqttData.getBaseUnit(unit, 'children') === undefined);
    assert(MqttData.getBaseUnit(unit, 'max') === undefined);
    // 电压
    unit = 'Voltage';
    assert(MqttData.getBaseUnit(unit) === 'mV');
    assert(MqttData.getBaseUnit(unit, 'label') === 'mV');
    assert(MqttData.getBaseUnit(unit, 'isBase') === true);
    assert(MqttData.getBaseUnit(unit, 'format') !== undefined);
    assert(MqttData.getBaseUnit(unit, 'format').step === 1);
    assert(MqttData.getBaseUnit(unit, 'children') === undefined);
    assert(MqttData.getBaseUnit(unit, 'max') === undefined);
    unit = '["Voltage"]';
    assert(MqttData.getBaseUnit(unit) === 'mV');
    assert(MqttData.getBaseUnit(unit, 'label') === 'mV');
    assert(MqttData.getBaseUnit(unit, 'isBase') === true);
    assert(MqttData.getBaseUnit(unit, 'format') !== undefined);
    assert(MqttData.getBaseUnit(unit, 'format').step === 1);
    assert(MqttData.getBaseUnit(unit, 'children') === undefined);
    assert(MqttData.getBaseUnit(unit, 'max') === undefined);
    unit = '["Voltage","mV"]';
    assert(MqttData.getBaseUnit(unit) === 'mV');
    assert(MqttData.getBaseUnit(unit, 'label') === 'mV');
    assert(MqttData.getBaseUnit(unit, 'isBase') === true);
    assert(MqttData.getBaseUnit(unit, 'format') !== undefined);
    assert(MqttData.getBaseUnit(unit, 'format').step === 1);
    assert(MqttData.getBaseUnit(unit, 'children') === undefined);
    assert(MqttData.getBaseUnit(unit, 'max') === undefined);
    unit = '["Voltage","V"]';
    assert(MqttData.getBaseUnit(unit) === 'mV');
    assert(MqttData.getBaseUnit(unit, 'label') === 'mV');
    assert(MqttData.getBaseUnit(unit, 'isBase') === true);
    assert(MqttData.getBaseUnit(unit, 'format') !== undefined);
    assert(MqttData.getBaseUnit(unit, 'format').step === 1);
    assert(MqttData.getBaseUnit(unit, 'children') === undefined);
    assert(MqttData.getBaseUnit(unit, 'max') === undefined);
    // 电流
    unit = 'Current';
    assert(MqttData.getBaseUnit(unit) === 'mA');
    assert(MqttData.getBaseUnit(unit, 'label') === 'mA');
    assert(MqttData.getBaseUnit(unit, 'isBase') === true);
    assert(MqttData.getBaseUnit(unit, 'format') !== undefined);
    assert(MqttData.getBaseUnit(unit, 'format').step === 1);
    assert(MqttData.getBaseUnit(unit, 'children') === undefined);
    assert(MqttData.getBaseUnit(unit, 'max') === undefined);
    unit = '["Current"]';
    assert(MqttData.getBaseUnit(unit) === 'mA');
    assert(MqttData.getBaseUnit(unit, 'label') === 'mA');
    assert(MqttData.getBaseUnit(unit, 'isBase') === true);
    assert(MqttData.getBaseUnit(unit, 'format') !== undefined);
    assert(MqttData.getBaseUnit(unit, 'format').step === 1);
    assert(MqttData.getBaseUnit(unit, 'children') === undefined);
    assert(MqttData.getBaseUnit(unit, 'max') === undefined);
    unit = '["Current","mA"]';
    assert(MqttData.getBaseUnit(unit) === 'mA');
    assert(MqttData.getBaseUnit(unit, 'label') === 'mA');
    assert(MqttData.getBaseUnit(unit, 'isBase') === true);
    assert(MqttData.getBaseUnit(unit, 'format') !== undefined);
    assert(MqttData.getBaseUnit(unit, 'format').step === 1);
    assert(MqttData.getBaseUnit(unit, 'children') === undefined);
    assert(MqttData.getBaseUnit(unit, 'max') === undefined);
    unit = '["Current","A"]';
    assert(MqttData.getBaseUnit(unit) === 'mA');
    assert(MqttData.getBaseUnit(unit, 'label') === 'mA');
    assert(MqttData.getBaseUnit(unit, 'isBase') === true);
    assert(MqttData.getBaseUnit(unit, 'format') !== undefined);
    assert(MqttData.getBaseUnit(unit, 'format').step === 1);
    assert(MqttData.getBaseUnit(unit, 'children') === undefined);
    assert(MqttData.getBaseUnit(unit, 'max') === undefined);
    // 频率
    unit = 'frequency';
    assert(MqttData.getBaseUnit(unit) === 'HZ');
    assert(MqttData.getBaseUnit(unit, 'label') === 'HZ');
    assert(MqttData.getBaseUnit(unit, 'isBase') === true);
    assert(MqttData.getBaseUnit(unit, 'format') !== undefined);
    assert(MqttData.getBaseUnit(unit, 'format').step === 1);
    assert(MqttData.getBaseUnit(unit, 'children') === undefined);
    assert(MqttData.getBaseUnit(unit, 'max') === 50);
    unit = '["frequency"]';
    assert(MqttData.getBaseUnit(unit) === 'HZ');
    assert(MqttData.getBaseUnit(unit, 'label') === 'HZ');
    assert(MqttData.getBaseUnit(unit, 'isBase') === true);
    assert(MqttData.getBaseUnit(unit, 'format') !== undefined);
    assert(MqttData.getBaseUnit(unit, 'format').step === 1);
    assert(MqttData.getBaseUnit(unit, 'children') === undefined);
    assert(MqttData.getBaseUnit(unit, 'max') === 50);
    unit = '["frequency","HZ"]';
    assert(MqttData.getBaseUnit(unit) === 'HZ');
    assert(MqttData.getBaseUnit(unit, 'label') === 'HZ');
    assert(MqttData.getBaseUnit(unit, 'isBase') === true);
    assert(MqttData.getBaseUnit(unit, 'format') !== undefined);
    assert(MqttData.getBaseUnit(unit, 'format').step === 1);
    assert(MqttData.getBaseUnit(unit, 'children') === undefined);
    assert(MqttData.getBaseUnit(unit, 'max') === 50);
    unit = '["frequency","KHZ"]';
    assert(MqttData.getBaseUnit(unit) === 'HZ');
    assert(MqttData.getBaseUnit(unit, 'label') === 'HZ');
    assert(MqttData.getBaseUnit(unit, 'isBase') === true);
    assert(MqttData.getBaseUnit(unit, 'format') !== undefined);
    assert(MqttData.getBaseUnit(unit, 'format').step === 1);
    assert(MqttData.getBaseUnit(unit, 'children') === undefined);
    assert(MqttData.getBaseUnit(unit, 'max') === 50);
    unit = '["frequency","MHZ"]';
    assert(MqttData.getBaseUnit(unit) === 'HZ');
    assert(MqttData.getBaseUnit(unit, 'label') === 'HZ');
    assert(MqttData.getBaseUnit(unit, 'isBase') === true);
    assert(MqttData.getBaseUnit(unit, 'format') !== undefined);
    assert(MqttData.getBaseUnit(unit, 'format').step === 1);
    assert(MqttData.getBaseUnit(unit, 'children') === undefined);
    assert(MqttData.getBaseUnit(unit, 'max') === 50);
    // 功率单位
    unit = 'power';
    assert(MqttData.getBaseUnit(unit) === 'W');
    assert(MqttData.getBaseUnit(unit, 'label') === 'W');
    assert(MqttData.getBaseUnit(unit, 'isBase') === true);
    assert(MqttData.getBaseUnit(unit, 'format') !== undefined);
    assert(MqttData.getBaseUnit(unit, 'format').step === 1);
    assert(MqttData.getBaseUnit(unit, 'children') === undefined);
    assert(MqttData.getBaseUnit(unit, 'max') === undefined);
    unit = '["power"]';
    assert(MqttData.getBaseUnit(unit) === 'W');
    assert(MqttData.getBaseUnit(unit, 'label') === 'W');
    assert(MqttData.getBaseUnit(unit, 'isBase') === true);
    assert(MqttData.getBaseUnit(unit, 'format') !== undefined);
    assert(MqttData.getBaseUnit(unit, 'format').step === 1);
    assert(MqttData.getBaseUnit(unit, 'children') === undefined);
    assert(MqttData.getBaseUnit(unit, 'max') === undefined);
    unit = '["power","W"]';
    assert(MqttData.getBaseUnit(unit) === 'W');
    assert(MqttData.getBaseUnit(unit, 'label') === 'W');
    assert(MqttData.getBaseUnit(unit, 'isBase') === true);
    assert(MqttData.getBaseUnit(unit, 'format') !== undefined);
    assert(MqttData.getBaseUnit(unit, 'format').step === 1);
    assert(MqttData.getBaseUnit(unit, 'children') === undefined);
    assert(MqttData.getBaseUnit(unit, 'max') === undefined);
    unit = '["power","KW"]';
    assert(MqttData.getBaseUnit(unit) === 'W');
    assert(MqttData.getBaseUnit(unit, 'label') === 'W');
    assert(MqttData.getBaseUnit(unit, 'isBase') === true);
    assert(MqttData.getBaseUnit(unit, 'format') !== undefined);
    assert(MqttData.getBaseUnit(unit, 'format').step === 1);
    assert(MqttData.getBaseUnit(unit, 'children') === undefined);
    assert(MqttData.getBaseUnit(unit, 'max') === undefined);
    unit = '["power","MW"]';
    assert(MqttData.getBaseUnit(unit) === 'W');
    assert(MqttData.getBaseUnit(unit, 'label') === 'W');
    assert(MqttData.getBaseUnit(unit, 'isBase') === true);
    assert(MqttData.getBaseUnit(unit, 'format') !== undefined);
    assert(MqttData.getBaseUnit(unit, 'format').step === 1);
    assert(MqttData.getBaseUnit(unit, 'children') === undefined);
    assert(MqttData.getBaseUnit(unit, 'max') === undefined);
    // 温度单位
    unit = 'temperature';
    assert(MqttData.getBaseUnit(unit) === '℃');
    assert(MqttData.getBaseUnit(unit, 'label') === '℃');
    assert(MqttData.getBaseUnit(unit, 'isBase') === true);
    assert(MqttData.getBaseUnit(unit, 'format') !== undefined);
    assert(MqttData.getBaseUnit(unit, 'format').step === 1);
    assert(MqttData.getBaseUnit(unit, 'children') === undefined);
    assert(MqttData.getBaseUnit(unit, 'max') === undefined);
    unit = '["temperature"]';
    assert(MqttData.getBaseUnit(unit) === '℃');
    assert(MqttData.getBaseUnit(unit, 'label') === '℃');
    assert(MqttData.getBaseUnit(unit, 'isBase') === true);
    assert(MqttData.getBaseUnit(unit, 'format') !== undefined);
    assert(MqttData.getBaseUnit(unit, 'format').step === 1);
    assert(MqttData.getBaseUnit(unit, 'children') === undefined);
    assert(MqttData.getBaseUnit(unit, 'max') === undefined);
    unit = '["temperature","℃"]';
    assert(MqttData.getBaseUnit(unit) === '℃');
    assert(MqttData.getBaseUnit(unit, 'label') === '℃');
    assert(MqttData.getBaseUnit(unit, 'isBase') === true);
    assert(MqttData.getBaseUnit(unit, 'format') !== undefined);
    assert(MqttData.getBaseUnit(unit, 'format').step === 1);
    assert(MqttData.getBaseUnit(unit, 'children') === undefined);
    assert(MqttData.getBaseUnit(unit, 'max') === undefined);
    // 湿度单位
    unit = 'humidity';
    assert(MqttData.getBaseUnit(unit) === '%');
    assert(MqttData.getBaseUnit(unit, 'label') === '%');
    assert(MqttData.getBaseUnit(unit, 'isBase') === true);
    assert(MqttData.getBaseUnit(unit, 'format') !== undefined);
    assert(MqttData.getBaseUnit(unit, 'format').step === 1);
    assert(MqttData.getBaseUnit(unit, 'children') === undefined);
    assert(MqttData.getBaseUnit(unit, 'max') === undefined);
    unit = '["humidity"]';
    assert(MqttData.getBaseUnit(unit) === '%');
    assert(MqttData.getBaseUnit(unit, 'label') === '%');
    assert(MqttData.getBaseUnit(unit, 'isBase') === true);
    assert(MqttData.getBaseUnit(unit, 'format') !== undefined);
    assert(MqttData.getBaseUnit(unit, 'format').step === 1);
    assert(MqttData.getBaseUnit(unit, 'children') === undefined);
    assert(MqttData.getBaseUnit(unit, 'max') === undefined);
    unit = '["humidity","%"]';
    assert(MqttData.getBaseUnit(unit) === '%');
    assert(MqttData.getBaseUnit(unit, 'label') === '%');
    assert(MqttData.getBaseUnit(unit, 'isBase') === true);
    assert(MqttData.getBaseUnit(unit, 'format') !== undefined);
    assert(MqttData.getBaseUnit(unit, 'format').step === 1);
    assert(MqttData.getBaseUnit(unit, 'children') === undefined);
    assert(MqttData.getBaseUnit(unit, 'max') === undefined);

    assert(MqttData.getBaseUnit('?') === '');
    assert(MqttData.getBaseUnit('["-"]') === '');
  });
  it('TEST unitFormat', () => {
    // 时间单位
    let unit = '["Time","s"]';
    assert(MqttData.unitFormat(unit) === '秒');
    assert(MqttData.unitFormat(unit, 'value') === 's');
    assert(MqttData.unitFormat(unit, 'isBase') === true);
    assert(MqttData.unitFormat(unit, 'format') !== undefined);
    assert(MqttData.unitFormat(unit, 'format').step === 1);
    assert(MqttData.unitFormat(unit, 'children') === undefined);
    assert(MqttData.unitFormat(unit, 'max') === undefined);
    unit = '["Time","m"]';
    assert(MqttData.unitFormat(unit) === '分');
    assert(MqttData.unitFormat(unit, 'value') === 'm');
    assert(MqttData.unitFormat(unit, 'isBase') === undefined);
    assert(MqttData.unitFormat(unit, 'format') !== undefined);
    assert(MqttData.unitFormat(unit, 'format').step === 60);
    assert(MqttData.unitFormat(unit, 'children') === undefined);
    assert(MqttData.unitFormat(unit, 'max') === undefined);
    unit = '["Time","h"]';
    assert(MqttData.unitFormat(unit) === '时');
    assert(MqttData.unitFormat(unit, 'value') === 'h');
    assert(MqttData.unitFormat(unit, 'isBase') === undefined);
    assert(MqttData.unitFormat(unit, 'format') !== undefined);
    assert(MqttData.unitFormat(unit, 'format').step === 60 * 60);
    assert(MqttData.unitFormat(unit, 'children') === undefined);
    assert(MqttData.unitFormat(unit, 'max') === undefined);
    unit = '["Time","d"]';
    assert(MqttData.unitFormat(unit) === '日');
    assert(MqttData.unitFormat(unit, 'value') === 'd');
    assert(MqttData.unitFormat(unit, 'isBase') === undefined);
    assert(MqttData.unitFormat(unit, 'format') !== undefined);
    assert(MqttData.unitFormat(unit, 'format').step === 60 * 60 * 24);
    assert(MqttData.unitFormat(unit, 'children') === undefined);
    assert(MqttData.unitFormat(unit, 'max') === undefined);
    unit = '["Time","M"]';
    assert(MqttData.unitFormat(unit) === '月');
    assert(MqttData.unitFormat(unit, 'value') === 'M');
    assert(MqttData.unitFormat(unit, 'isBase') === undefined);
    assert(MqttData.unitFormat(unit, 'format') !== undefined);
    assert(MqttData.unitFormat(unit, 'format').step === 60 * 60 * 24 * 30);
    assert(MqttData.unitFormat(unit, 'children') === undefined);
    assert(MqttData.unitFormat(unit, 'max') === undefined);
    unit = '["Time","y"]';
    assert(MqttData.unitFormat(unit) === '年');
    assert(MqttData.unitFormat(unit, 'value') === 'y');
    assert(MqttData.unitFormat(unit, 'isBase') === undefined);
    assert(MqttData.unitFormat(unit, 'format') !== undefined);
    assert(MqttData.unitFormat(unit, 'format').step === 60 * 60 * 24 * 365);
    assert(MqttData.unitFormat(unit, 'children') === undefined);
    assert(MqttData.unitFormat(unit, 'max') === undefined);
    // 电量单位
    unit = '["Energy","kW·h"]';
    assert(MqttData.unitFormat(unit) === 'kW·h');
    assert(MqttData.unitFormat(unit, 'value') === 'kW·h');
    assert(MqttData.unitFormat(unit, 'isBase') === true);
    assert(MqttData.unitFormat(unit, 'format') !== undefined);
    assert(MqttData.unitFormat(unit, 'format').step === 1);
    assert(MqttData.unitFormat(unit, 'children') === undefined);
    assert(MqttData.unitFormat(unit, 'max') === undefined);
    // 流量单位
    unit = '["Flow","m3"]';
    assert(MqttData.unitFormat(unit) === 'm³');
    assert(MqttData.unitFormat(unit, 'value') === 'm3');
    assert(MqttData.unitFormat(unit, 'isBase') === true);
    assert(MqttData.unitFormat(unit, 'format') !== undefined);
    assert(MqttData.unitFormat(unit, 'format').step === 1);
    assert(MqttData.unitFormat(unit, 'children') === undefined);
    assert(MqttData.unitFormat(unit, 'max') === undefined);
    unit = '["Flow","m3/d"]';
    assert(MqttData.unitFormat(unit) === 'm³/d');
    assert(MqttData.unitFormat(unit, 'value') === 'm3/d');
    assert(MqttData.unitFormat(unit, 'isBase') === undefined);
    assert(MqttData.unitFormat(unit, 'format') !== undefined);
    assert(MqttData.unitFormat(unit, 'format').step === 1);
    assert(MqttData.unitFormat(unit, 'children') === undefined);
    assert(MqttData.unitFormat(unit, 'max') === undefined);
    unit = '["Flow","m3/H"]';
    assert(MqttData.unitFormat(unit) === 'm³/H');
    assert(MqttData.unitFormat(unit, 'value') === 'm3/H');
    assert(MqttData.unitFormat(unit, 'isBase') === undefined);
    assert(MqttData.unitFormat(unit, 'format') !== undefined);
    assert(MqttData.unitFormat(unit, 'format').step === 24);
    assert(MqttData.unitFormat(unit, 'children') === undefined);
    assert(MqttData.unitFormat(unit, 'max') === undefined);
    // 浓度单位
    unit = '["concentration","mg/L"]';
    assert(MqttData.unitFormat(unit) === 'mg/L');
    assert(MqttData.unitFormat(unit, 'value') === 'mg/L');
    assert(MqttData.unitFormat(unit, 'isBase') === true);
    assert(MqttData.unitFormat(unit, 'format') !== undefined);
    assert(MqttData.unitFormat(unit, 'format').step === 1);
    assert(MqttData.unitFormat(unit, 'children') === undefined);
    assert(MqttData.unitFormat(unit, 'max') === undefined);
    unit = '["concentration","g/L"]';
    assert(MqttData.unitFormat(unit) === 'g/L');
    assert(MqttData.unitFormat(unit, 'value') === 'g/L');
    assert(MqttData.unitFormat(unit, 'isBase') === undefined);
    assert(MqttData.unitFormat(unit, 'format') !== undefined);
    assert(MqttData.unitFormat(unit, 'format').step === 1000);
    assert(MqttData.unitFormat(unit, 'children') === undefined);
    assert(MqttData.unitFormat(unit, 'max') === undefined);
    // ppm浓度单位
    unit = '["ppm","ppm"]';
    assert(MqttData.unitFormat(unit) === 'ppm');
    assert(MqttData.unitFormat(unit, 'value') === 'ppm');
    assert(MqttData.unitFormat(unit, 'isBase') === true);
    assert(MqttData.unitFormat(unit, 'format') !== undefined);
    assert(MqttData.unitFormat(unit, 'format').step === 1);
    assert(MqttData.unitFormat(unit, 'children') === undefined);
    assert(MqttData.unitFormat(unit, 'max') === undefined);
    // 气压
    unit = '["airPressure","KPa"]';
    assert(MqttData.unitFormat(unit) === 'KPa');
    assert(MqttData.unitFormat(unit, 'value') === 'KPa');
    assert(MqttData.unitFormat(unit, 'isBase') === true);
    assert(MqttData.unitFormat(unit, 'format') !== undefined);
    assert(MqttData.unitFormat(unit, 'format').step === 1);
    assert(MqttData.unitFormat(unit, 'children') === undefined);
    assert(MqttData.unitFormat(unit, 'max') === undefined);
    unit = '["airPressure","Pa"]';
    assert(MqttData.unitFormat(unit) === 'Pa');
    assert(MqttData.unitFormat(unit, 'value') === 'Pa');
    assert(MqttData.unitFormat(unit, 'isBase') === undefined);
    assert(MqttData.unitFormat(unit, 'format') !== undefined);
    assert(MqttData.unitFormat(unit, 'format').step === 1 / 1000);
    assert(MqttData.unitFormat(unit, 'children') === undefined);
    assert(MqttData.unitFormat(unit, 'max') === undefined);
    unit = '["airPressure","MPa"]';
    assert(MqttData.unitFormat(unit) === 'MPa');
    assert(MqttData.unitFormat(unit, 'value') === 'MPa');
    assert(MqttData.unitFormat(unit, 'isBase') === undefined);
    assert(MqttData.unitFormat(unit, 'format') !== undefined);
    assert(MqttData.unitFormat(unit, 'format').step === 1000);
    assert(MqttData.unitFormat(unit, 'children') === undefined);
    assert(MqttData.unitFormat(unit, 'max') === undefined);
    // 电压
    unit = '["Voltage","mV"]';
    assert(MqttData.unitFormat(unit) === 'mV');
    assert(MqttData.unitFormat(unit, 'value') === 'mV');
    assert(MqttData.unitFormat(unit, 'isBase') === true);
    assert(MqttData.unitFormat(unit, 'format') !== undefined);
    assert(MqttData.unitFormat(unit, 'format').step === 1);
    assert(MqttData.unitFormat(unit, 'children') === undefined);
    assert(MqttData.unitFormat(unit, 'max') === undefined);
    unit = '["Voltage","V"]';
    assert(MqttData.unitFormat(unit) === 'V');
    assert(MqttData.unitFormat(unit, 'value') === 'V');
    assert(MqttData.unitFormat(unit, 'isBase') === undefined);
    assert(MqttData.unitFormat(unit, 'format') !== undefined);
    assert(MqttData.unitFormat(unit, 'format').step === 1000);
    assert(MqttData.unitFormat(unit, 'children') === undefined);
    assert(MqttData.unitFormat(unit, 'max') === undefined);
    // 电流
    unit = '["Current","mA"]';
    assert(MqttData.unitFormat(unit) === 'mA');
    assert(MqttData.unitFormat(unit, 'value') === 'mA');
    assert(MqttData.unitFormat(unit, 'isBase') === true);
    assert(MqttData.unitFormat(unit, 'format') !== undefined);
    assert(MqttData.unitFormat(unit, 'format').step === 1);
    assert(MqttData.unitFormat(unit, 'children') === undefined);
    assert(MqttData.unitFormat(unit, 'max') === undefined);
    unit = '["Current","A"]';
    assert(MqttData.unitFormat(unit) === 'A');
    assert(MqttData.unitFormat(unit, 'value') === 'A');
    assert(MqttData.unitFormat(unit, 'isBase') === undefined);
    assert(MqttData.unitFormat(unit, 'format') !== undefined);
    assert(MqttData.unitFormat(unit, 'format').step === 1000);
    assert(MqttData.unitFormat(unit, 'children') === undefined);
    assert(MqttData.unitFormat(unit, 'max') === undefined);
    // 频率
    unit = '["frequency","HZ"]';
    assert(MqttData.unitFormat(unit) === 'HZ');
    assert(MqttData.unitFormat(unit, 'value') === 'HZ');
    assert(MqttData.unitFormat(unit, 'isBase') === true);
    assert(MqttData.unitFormat(unit, 'format') !== undefined);
    assert(MqttData.unitFormat(unit, 'format').step === 1);
    assert(MqttData.unitFormat(unit, 'children') === undefined);
    assert(MqttData.unitFormat(unit, 'max') === 50);
    unit = '["frequency","KHZ"]';
    assert(MqttData.unitFormat(unit) === 'KHZ');
    assert(MqttData.unitFormat(unit, 'value') === 'KHZ');
    assert(MqttData.unitFormat(unit, 'isBase') === undefined);
    assert(MqttData.unitFormat(unit, 'format') !== undefined);
    assert(MqttData.unitFormat(unit, 'format').step === 1000);
    assert(MqttData.unitFormat(unit, 'children') === undefined);
    assert(MqttData.unitFormat(unit, 'max') === undefined);
    unit = '["frequency","MHZ"]';
    assert(MqttData.unitFormat(unit) === 'MHZ');
    assert(MqttData.unitFormat(unit, 'value') === 'MHZ');
    assert(MqttData.unitFormat(unit, 'isBase') === undefined);
    assert(MqttData.unitFormat(unit, 'format') !== undefined);
    assert(MqttData.unitFormat(unit, 'format').step === 1000 * 1000);
    assert(MqttData.unitFormat(unit, 'children') === undefined);
    assert(MqttData.unitFormat(unit, 'max') === undefined);
    // 功率单位
    unit = '["power","W"]';
    assert(MqttData.unitFormat(unit) === 'W');
    assert(MqttData.unitFormat(unit, 'value') === 'W');
    assert(MqttData.unitFormat(unit, 'isBase') === true);
    assert(MqttData.unitFormat(unit, 'format') !== undefined);
    assert(MqttData.unitFormat(unit, 'format').step === 1);
    assert(MqttData.unitFormat(unit, 'children') === undefined);
    assert(MqttData.unitFormat(unit, 'max') === undefined);
    unit = '["power","KW"]';
    assert(MqttData.unitFormat(unit) === 'KW');
    assert(MqttData.unitFormat(unit, 'value') === 'KW');
    assert(MqttData.unitFormat(unit, 'isBase') === undefined);
    assert(MqttData.unitFormat(unit, 'format') !== undefined);
    assert(MqttData.unitFormat(unit, 'format').step === 1000);
    assert(MqttData.unitFormat(unit, 'children') === undefined);
    assert(MqttData.unitFormat(unit, 'max') === undefined);
    unit = '["power","MW"]';
    assert(MqttData.unitFormat(unit) === 'MW');
    assert(MqttData.unitFormat(unit, 'value') === 'MW');
    assert(MqttData.unitFormat(unit, 'isBase') === undefined);
    assert(MqttData.unitFormat(unit, 'format') !== undefined);
    assert(MqttData.unitFormat(unit, 'format').step === 1000 * 1000);
    assert(MqttData.unitFormat(unit, 'children') === undefined);
    assert(MqttData.unitFormat(unit, 'max') === undefined);
    // 温度单位
    unit = '["temperature","℃"]';
    assert(MqttData.unitFormat(unit) === '℃');
    assert(MqttData.unitFormat(unit, 'value') === '℃');
    assert(MqttData.unitFormat(unit, 'isBase') === true);
    assert(MqttData.unitFormat(unit, 'format') !== undefined);
    assert(MqttData.unitFormat(unit, 'format').step === 1);
    assert(MqttData.unitFormat(unit, 'children') === undefined);
    assert(MqttData.unitFormat(unit, 'max') === undefined);
    // 湿度单位
    unit = '["humidity","%"]';
    assert(MqttData.unitFormat(unit) === '%');
    assert(MqttData.unitFormat(unit, 'value') === '%');
    assert(MqttData.unitFormat(unit, 'isBase') === true);
    assert(MqttData.unitFormat(unit, 'format') !== undefined);
    assert(MqttData.unitFormat(unit, 'format').step === 1);
    assert(MqttData.unitFormat(unit, 'children') === undefined);
    assert(MqttData.unitFormat(unit, 'max') === undefined);
  });
});
